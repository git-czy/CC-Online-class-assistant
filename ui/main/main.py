# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import sys
import time

import selenium.webdriver.support.ui as ui
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, QThread, QMutex
from PyQt5.QtGui import QTextCursor
from PyQt5.QtWidgets import QMainWindow
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException, NoAlertPresentException, TimeoutException
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By

from chome import load_chrome
from selenium.webdriver import Chrome

from chome.course import find_courses

mutex = QMutex()


class MainWindow(object):

    def setupUi(self, main):
        main.setObjectName("main")
        main.resize(500, 700)
        main.setMinimumSize(QtCore.QSize(500, 700))
        main.setMaximumSize(QtCore.QSize(600, 700))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/cc.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        main.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(main)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(14, 10, 471, 621))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.CouresCheck = QtWidgets.QComboBox(self.layoutWidget)
        self.CouresCheck.setMinimumSize(QtCore.QSize(0, 0))
        self.CouresCheck.setMaximumSize(QtCore.QSize(321, 20))
        self.CouresCheck.setObjectName("CouresCheck")
        self.CouresCheck.addItem("")
        self.CouresCheck.addItem("")
        self.horizontalLayout.addWidget(self.CouresCheck)
        self.ChaptersCheck = QtWidgets.QComboBox(self.layoutWidget)
        self.ChaptersCheck.setMinimumSize(QtCore.QSize(0, 0))
        self.ChaptersCheck.setMaximumSize(QtCore.QSize(321, 20))
        self.ChaptersCheck.setObjectName("ChaptersCheck")
        self.ChaptersCheck.addItem("")
        self.ChaptersCheck.addItem("")
        self.horizontalLayout.addWidget(self.ChaptersCheck)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.StartBtn = QtWidgets.QPushButton(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.StartBtn.sizePolicy().hasHeightForWidth())
        self.StartBtn.setSizePolicy(sizePolicy)
        self.StartBtn.setMinimumSize(QtCore.QSize(71, 31))
        self.StartBtn.setMaximumSize(QtCore.QSize(71, 31))
        self.StartBtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.StartBtn.setObjectName("StartBtn")
        self.horizontalLayout_2.addWidget(self.StartBtn)
        self.AutoAnswer = QtWidgets.QCheckBox(self.layoutWidget)
        # self.AutoAnswer.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.AutoAnswer.sizePolicy().hasHeightForWidth())
        self.AutoAnswer.setSizePolicy(sizePolicy)
        self.AutoAnswer.setObjectName("AutoAnswer")
        self.horizontalLayout_2.addWidget(self.AutoAnswer)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.chapternow = QtWidgets.QLabel(self.layoutWidget)
        self.chapternow.setObjectName("chapternow")
        self.verticalLayout.addWidget(self.chapternow)
        self.line = QtWidgets.QFrame(self.layoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.label_4 = QtWidgets.QLabel(self.layoutWidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.ChapterProgress = QtWidgets.QProgressBar(self.layoutWidget)
        self.ChapterProgress.setProperty("value", 0)
        self.ChapterProgress.setObjectName("ChapterProgress")
        self.verticalLayout.addWidget(self.ChapterProgress)
        self.textEdit = QtWidgets.QTextEdit(self.layoutWidget)
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")
        self.verticalLayout.addWidget(self.textEdit)
        main.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(main)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 500, 26))
        self.menubar.setObjectName("menubar")
        main.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(main)
        self.statusbar.setObjectName("statusbar")
        main.setStatusBar(self.statusbar)

        self.retranslateUi(main)
        QtCore.QMetaObject.connectSlotsByName(main)

    def retranslateUi(self, main):
        _translate = QtCore.QCoreApplication.translate
        main.setWindowTitle(_translate("main", "cc网课助手"))
        self.label_2.setText(_translate("main", "课程"))
        self.label.setText(_translate("main", "章节"))
        self.StartBtn.setText(_translate("main", "开始观看"))
        self.AutoAnswer.setText(_translate("main", "开启课后答题"))
        self.AutoAnswer.setChecked(True)
        self.chapternow.setText(_translate("main", "第一章节"))
        self.label_4.setText(_translate("main", "当前章节进度"))


class RunThread(QThread):
    #  通过类成员对象定义信号对象
    signal1 = pyqtSignal(int)

    # signal2 = pyqtSignal(str)
    # signal3 = pyqtSignal(str)
    # signal4 = pyqtSignal(object)

    def __init__(self, driver: Chrome, ui_main):
        super(RunThread, self).__init__()
        self.ui = ui_main
        self.driver = driver

        self.Chapter = self.ui.ChaptersCheck.currentText()
        self.course = self.ui.CouresCheck.currentText()

    def __del__(self):
        self.wait()

    def run(self):
        print('hello world')
        mutex.lock()
        print(self.driver.title)
        self.driver.quit()
        mutex.unlock()
        for i in range(100):
            time.sleep(0.05)
            self.signal1.emit(int(i))  # 注意这里与_signal = pyqtSignal(str)中的类型相同
        self.signal1.emit(int(100))


class ChromeThread(QThread):
    driver_signal = pyqtSignal(object)

    def __init__(self):
        super(ChromeThread, self).__init__()

    def __del__(self):
        self.wait()

    def run(self):
        mutex.lock()
        driver = load_chrome()
        print(driver)
        data = find_courses(driver)
        print(data)
        self.driver_signal.emit(driver)
        mutex.unlock()


class UiMain(QMainWindow, MainWindow):
    def __init__(self):
        super().__init__()
        self.splash = QtWidgets.QSplashScreen(QtGui.QPixmap('img/wait.gif'))
        self.setupUi(self)
        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)

        self.course_thread = None
        self.chrome_thread = None

        self.driver = None

    def show(self) -> None:
        super().show()
        self.splash.close()

    def start(self):
        # self.is_ans = 1 if self.AutoAnswer.isChecked() else 0
        # update_last_user_is_ans(self.is_ans)
        self.CouresCheck.setEnabled(False)
        self.ChaptersCheck.setEnabled(False)
        self.StartBtn.setEnabled(False)
        self.AutoAnswer.setEnabled(False)
        # 创建线程
        self.course_thread = RunThread(self.driver, self)
        # 连接信号
        self.course_thread.signal1.connect(self.progress)  # 进程连接回传到GUI的事件
        # self.thread.signal2.connect(self.showstate)  # 进程连接回传到GUI的事件
        # self.thread.signal3.connect(self.showlog)  # 进程连接回传到GUI的事件
        # self.thread.signal4.connect(self.driver_handle)  # 进程连接回传到GUI的事件
        # self.
        # 开始主线程
        self.course_thread.start()

    def init_chrome(self):
        self.splash.show()
        self.chrome_thread = ChromeThread()
        self.chrome_thread.driver_signal.connect(self.chrome)
        self.chrome_thread.start()

    def chrome(self, driver: object):
        self.driver = driver
        self.chrome_thread.quit()
        self.show()

    # def driver_handle(self, object):
    #     self.dr = object
    #
    # def showlog(self, log):
    #     self.textEdit.insertPlainText(log + '\n')
    #     self.textEdit.moveCursor(QTextCursor.End)
    #
    # def showstate(self, msg):
    #     self.chapternow.setStyleSheet("color:red")
    #     self.chapternow.setText(str(msg))
    #
    def progress(self, value: int):
        self.ChapterProgress.setValue(value)  # 将线程的参数传入进度条
        if value == 100:
            # self.thread.terminate()
            del self.course_thread
            self.StartBtn.setEnabled(True)

    # def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
    #     super().closeEvent(a0)
    #     try:
    #         if self.dr:
    #             self.dr.quit()
    #         if self.client is not None:
    #             try:
    #                 code = send_data(self.client, data='exit')
    #             except Exception as e:
    #                 writelog('向服务器发送断开信息失败')
    #                 writelog(str(e))
    #         writelog('退出程序')
    #         sys.exit(0)
    #     except Exception as e:
    #         writelog('关闭出错')
    #         writelog(str(e.__traceback__))
    #         sys.exit(0)

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        self.driver.quit()
        super(UiMain, self).closeEvent(a0)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = UiMain()
    ui.StartBtn.clicked.connect(lambda: ui.start())
    ui.show()
    sys.exit(app.exec_())
